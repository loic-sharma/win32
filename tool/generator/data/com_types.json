{
    "Windows.Win32.Devices.Sensors.ISensor": "Represents a sensor.",
    "Windows.Win32.Devices.Sensors.ISensorCollection": "Represents a collection of sensors, such as all the sensors connected to a computer.",
    "Windows.Win32.Devices.Sensors.ISensorDataReport": "Represents a sensor data report. Sensor data reports contain data field values generated by a sensor and a time stamp that indicates when the data report was created.",
    "Windows.Win32.Devices.Sensors.ISensorManager": "Provides methods for discovering and retrieving available sensors and a method to request sensor manager events.",
    "Windows.Win32.Globalization.IEnumSpellingError": "An enumeration of the spelling errors.",
    "Windows.Win32.Globalization.ISpellChecker": "Represents a particular spell checker for a particular language. The ISpellChecker can be used to check text, get suggestions, update user dictionaries, and maintain options.",
    "Windows.Win32.Globalization.ISpellChecker2": "Represents a particular spell checker for a particular language, with the added ability to remove words from the added words dictionary, or from the ignore list. The ISpellChecker2 can also be used to check text, get suggestions, update user dictionaries, and maintain options, as can [ISpellChecker] from which it is derived.",
    "Windows.Win32.Globalization.ISpellCheckerChangedEventHandler": "Allows the caller to create a handler for notifications that the state of the speller has changed.",
    "Windows.Win32.Globalization.ISpellCheckerFactory": "A factory for instantiating a spell checker [ISpellChecker] as well as providing functionality for determining which languages are supported.",
    "Windows.Win32.Globalization.ISpellingError": "Provides information about a spelling error.",
    "Windows.Win32.Media.Audio.IAudioCaptureClient": "The IAudioCaptureClient interface enables a client to read input data from a capture endpoint buffer. The client obtains a reference to the [IAudioCaptureClient] interface on a stream object by calling the `IAudioClient::GetService` method with parameter `riid` set to REFIID [IID_IAudioCaptureClient].",
    "Windows.Win32.Media.Audio.IAudioClient": "The IAudioClient interface enables a client to create and initialize an audio stream between an audio application and the audio engine (for a shared-mode stream) or the hardware buffer of an audio endpoint device (for an exclusive-mode stream).",
    "Windows.Win32.Media.Audio.IAudioClock": "The IAudioClock interface enables a client to monitor a stream's data rate and the current position in the stream. The client obtains a reference to the [IAudioClock] interface of a stream object by calling the `IAudioClient::GetService` method with parameter `riid` set to REFIID [IID_IAudioClock].",
    "Windows.Win32.Media.Audio.IAudioRenderClient": "The IAudioRenderClient interface enables a client to write output data to a rendering endpoint buffer. The client obtains a reference to the [IAudioRenderClient] interface of a stream object by calling the `IAudioClient::GetService` method with parameter `riid` set to REFIID [IID_IAudioRenderClient].",
    "Windows.Win32.Media.Audio.IAudioSessionControl": "The IAudioSessionControl interface enables a client to configure the control parameters for an audio session and to monitor events in the session. The `IAudioClient::Initialize` method initializes a stream object and assigns the stream to an audio session. The client obtains a reference to the IAudioSessionControl interface on a stream object by calling the `IAudioClient::GetService` method with parameter riid set to REFIID [IID_IAudioSessionControl].",
    "Windows.Win32.Media.Audio.IAudioSessionManager": "The IAudioSessionManager interface enables a client to access the session controls and volume controls for both cross-process and process-specific audio sessions. The client obtains a reference to an [IAudioSessionManager] interface by calling the `IMMDevice::Activate` method with parameter `iid` set to REFIID [IID_IAudioSessionManager].",
    "Windows.Win32.Media.Audio.IAudioStreamVolume": "The IAudioStreamVolume interface enables a client to control and monitor the volume levels for all of the channels in an audio stream. The client obtains a reference to the [IAudioStreamVolume] interface on a stream object by calling the `IAudioClient::GetService` method with parameter riid set to REFIID [IID_IAudioStreamVolume].",
    "Windows.Win32.Media.Audio.IChannelAudioVolume": "The IChannelAudioVolume interface enables a client to control and monitor the volume levels for all of the channels in the audio session that the stream belongs to. This is the session that the client assigned the stream to during the call to the `IAudioClient::Initialize` method. The client obtains a reference to the [IChannelAudioVolume] interface on a stream object by calling the `IAudioClient::GetService` method with parameter `riid` set to REFIID [IID_IChannelAudioVolume].",
    "Windows.Win32.Media.Audio.IMMDevice": "The IMMDevice interface encapsulates the generic features of a multimedia device resource.",
    "Windows.Win32.Media.Audio.IMMDeviceEnumerator": "The IMMDeviceEnumerator interface provides methods for enumerating multimedia device resources.",
    "Windows.Win32.Media.Audio.ISimpleAudioVolume": "The ISimpleAudioVolume interface enables a client to control the master volume level of an audio session. The IAudioClient::Initialize method initializes a stream object and assigns the stream to an audio session. The client obtains a reference to the [ISimpleAudioVolume] interface on a stream object by calling the `IAudioClient::GetService` method with parameter `riid` set to REFIID [IID_ISimpleAudioVolume].",
    "Windows.Win32.Media.Speech.ISpEventSource": "Using the methods on ISpNotifySource an application can specify the mechanism by which it receives notifications.  Applications can configure which events should trigger notifications and which events retrieve queued events. ISpEventSource inherits from the [ISpNotifySource] interface.",
    "Windows.Win32.Media.Speech.ISpNotifySource": "In both speech synthesis and speech recognition, applications receive notifications when words have been spoken or when phrases have been recognized. SAPI components that generate notifications implement an ISpNotifySource.",
    "Windows.Win32.Media.Speech.ISpVoice": "The ISpVoice interface enables an application to perform speech synthesis operations. Applications can speak text strings and text files, or play audio files through this interface. All of these can be done synchronously or asynchronously.",
    "Windows.Win32.Media.Speech.ISpeechObjectToken": "",
    "Windows.Win32.Media.Speech.ISpeechObjectTokens": "The ISpeechObjectTokens automation interface represents a collection of SpObjectToken objects.",
    "Windows.Win32.Networking.NetworkListManager.IEnumNetworkConnections": "The IEnumNetworkConnections interface provides a standard enumerator for network connections. It enumerates active, disconnected, or all network connections within a network. This interface can be obtained from the [INetwork] interface.",
    "Windows.Win32.Networking.NetworkListManager.IEnumNetworks": "The IEnumNetworks interface is a standard enumerator for networks. It enumerates all networks available on the local machine. This interface can be obtained from the [INetworkListManager] interface.",
    "Windows.Win32.Networking.NetworkListManager.INetwork": "The INetwork interface represents a network on the local machine. It can also represent a collection of network connections with a similar network signature.",
    "Windows.Win32.Networking.NetworkListManager.INetworkConnection": "The INetworkConnection interface represents a single network connection.",
    "Windows.Win32.Networking.NetworkListManager.INetworkListManager": "The INetworkListManager interface provides a set of methods to perform network list management functions.",
    "Windows.Win32.Networking.NetworkListManager.INetworkListManagerEvents": "INetworkListManagerEvents is a message sink interface that a client implements to get overall machine state related events. Applications that are interested on higher-level events, for example internet connectivity, implement this interface.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxFactory": "Creates objects for reading and writing app packages.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxFile": "Retrieves information about a payload or footprint file in a package.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxFilesEnumerator": "Enumerates the payload files in a package.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestApplication": "Provides access to attribute values of the application.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestApplicationsEnumerator": "Enumerates the applications defined in the package manifest.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestOSPackageDependency": "",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestPackageDependenciesEnumerator": "Enumerates the package dependencies defined in the package manifest.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestPackageDependency": "Describes the dependency of one package on another package.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestPackageId": "Provides access to the package identity.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestProperties": "Provides read-only access to the properties section of a package manifest.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestReader": "Represents an object model of the package manifest that provides methods to access manifest elements and attributes.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestReader2": "Represents an object model of the package manifest that provides methods to access manifest elements and attributes.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestReader3": "Represents an object model of the package manifest that provides methods to access manifest elements and attributes.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestReader4": "Represents an object model of the package manifest that provides methods to access manifest elements and attributes.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestReader5": "Represents an object model of the package manifest that provides methods to access manifest elements and attributes.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestReader6": "Represents an object model of the package manifest that provides methods to access manifest elements and attributes.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxManifestReader7": "Represents an object model of the package manifest that provides methods to access manifest elements and attributes.",
    "Windows.Win32.Storage.Packaging.Appx.IAppxPackageReader": "Provides a read-only object model for app packages.",
    "Windows.Win32.System.Com.IBindCtx": "Provides access to a bind context, which is an object that stores information about a particular moniker binding operation.",
    "Windows.Win32.System.Com.IClassFactory": "Creates a call object for processing calls to the methods of an asynchronous interface.",
    "Windows.Win32.System.Com.IConnectionPoint": "Supports connection points for connectable objects.",
    "Windows.Win32.System.Com.IConnectionPointContainer": "Supports connection points for connectable objects.",
    "Windows.Win32.System.Com.IDispatch": "Exposes objects, methods and properties to programming tools and other applications that support Automation.",
    "Windows.Win32.System.Com.IEnumMoniker": "Enumerates the components of a moniker or the monikers in a table of monikers.",
    "Windows.Win32.System.Com.IEnumString": "Enumerate strings. [LPWSTR] is the type that indicates a pointer to a zero-terminated string of wide, or Unicode, characters.",
    "Windows.Win32.System.Com.IErrorInfo": "IErrorInfo is defined by Automation; the following describes how the interface is used in OLE DB. IErrorInfo returns information about an error in addition to the return code. It returns the error message, name of the component and GUID of the interface in which the error occurred, and the name and topic of the Help file that applies to the error.",
    "Windows.Win32.System.Com.IMoniker": "Enables you to use a moniker object, which contains information that uniquely identifies a COM object. An object that has a pointer to the moniker object's IMoniker interface can locate, activate, and get access to the identified object without having any other specific information on where the object is actually located in a distributed system. Monikers are used as the basis for linking in COM. A linked object contains a moniker that identifies its source. When the user activates the linked object to edit it, the moniker is bound; this loads the link source into memory.",
    "Windows.Win32.System.Com.IPersist": "Provides the CLSID of an object that can be stored persistently in the system. Allows the object to specify which object handler to use in the client process, as it is used in the default implementation of marshaling.",
    "Windows.Win32.System.Com.IPersistFile": "Enables an object to be loaded from or saved to a disk file, rather than a storage object or stream. Because the information needed to open a file varies greatly from one application to another, the implementation of `IPersistFile::Load`on the object must also open its disk file.    ",
    "Windows.Win32.System.Com.IPersistMemory": "Saves and loads objects from a stream.",
    "Windows.Win32.System.Com.IPersistStream": "Enables the saving and loading of objects that use a simple serial stream for their storage needs.",
    "Windows.Win32.System.Com.IRunningObjectTable": "Manages access to the running object table (ROT), a globally accessible look-up table on each workstation. A workstation's ROT keeps track of those objects that can be identified by a moniker and that are currently running on the workstation. When a client tries to bind a moniker to an object, the moniker checks the ROT to see if the object is already running; this allows the moniker to bind to the current instance instead of loading a new one.",
    "Windows.Win32.System.Com.ISequentialStream": "The ISequentialStream interface supports simplified sequential access to stream objects. The [IStream] interface inherits its Read and Write methods from ISequentialStream.",
    "Windows.Win32.System.Com.IStream": "The IStream interface lets you read and write data to stream objects. Stream objects contain the data in a structured storage object, where storages provide the structure. Simple data can be written directly to a stream but, most frequently, streams are elements nested within a storage object. They are similar to standard files.",
    "Windows.Win32.System.Com.ISupportErrorInfo": "Ensures that error information can be propagated up the call chain correctly. Automation objects that use the error handling interfaces must implement ISupportErrorInfo.",
    "Windows.Win32.System.Com.ITypeInfo": "This section describes ITypeInfo, an interface typically used for reading information about objects. For example, an object browser tool can use ITypeInfo to extract information about the characteristics and capabilities of objects from type libraries.",
    "Windows.Win32.System.Com.IUri": "Exposes methods and properties used to parse and build Uniform Resource Identifiers (URIs).",
    "Windows.Win32.System.Ole.IEnumVARIANT": "Provides a method for enumerating a collection of variants, including heterogeneous collections of objects and intrinsic types. Callers of this interface do not need to know the specific type (or types) of the elements in the collection.",
    "Windows.Win32.System.Ole.IProvideClassInfo": "Provides access to the type information for an object's coclass entry in its type library.",
    "Windows.Win32.System.WinRT.IInspectable": "Provides functionality required for all Windows Runtime classes.",
    "Windows.Win32.System.WinRT.IWebAuthenticationCoreManagerInterop": "Provides Win32 apps with access to certain functions of WebAuthenticationCoreManager that are otherwise available only to UWP apps.",
    "Windows.Win32.System.Wmi.IEnumWbemClassObject": "The IEnumWbemClassObject interface is used to enumerate Common Information Model (CIM) objects and is similar to a standard COM enumerator.",
    "Windows.Win32.System.Wmi.IWbemClassObject": "The IWbemClassObject interface contains and manipulates both class definitions and class object instances.",
    "Windows.Win32.System.Wmi.IWbemConfigureRefresher": "The IWbemConfigureRefresher interface is used by client code to add enumerators, objects, and nested refreshers into a refresher.",
    "Windows.Win32.System.Wmi.IWbemContext": "The IWbemContext interface is optionally used to communicate additional context information to providers when submitting [IWbemServices] calls to WMI. All primary calls in [IWbemServices] take an optional parameter pointing to an object of this type.",
    "Windows.Win32.System.Wmi.IWbemHiPerfEnum": "The IWbemHiPerfEnum interface is used in refresher operations to provide rapid access to enumerations of instance objects. WMI provides an implementation of this interface, which it passes to providers when `IWbemHiPerfProvider::CreateRefreshableEnum` is called, and it returns to clients when `IWbemConfigureRefresher::AddEnum` is called.",
    "Windows.Win32.System.Wmi.IWbemLocator": "Use the IWbemLocator interface to obtain the initial namespace pointer to the [IWbemServices] interface for WMI on a specific host computer. You can access Windows Management itself using the [IWbemServices] pointer, which is returned by the `IWbemLocator::ConnectServer` method.",
    "Windows.Win32.System.Wmi.IWbemObjectAccess": "The IWbemObjectAccess interface provides access to the methods and properties of an object. An IWbemObjectAccess object is a container for an instance updated by a refresher. With the IWbemObjectAccess interface, you can get and set properties by using property handles instead of object property names.",
    "Windows.Win32.System.Wmi.IWbemRefresher": "The IWbemRefresher interface provides an entry point through which refreshable objects such as enumerators or refresher objects, can be refreshed. Implementers of [IWbemHiPerfProvider] must provide an implementation of this interface.",
    "Windows.Win32.System.Wmi.IWbemServices": "The IWbemServices interface is used by clients and providers to access WMI services. The interface is implemented by WMI and WMI providers, and is the primary WMI interface.",
    "Windows.Win32.UI.Shell.IApplicationActivationManager": "Provides methods which activate Windows Store apps for the Launch, File, and Protocol extensions. You will normally use this interface in debuggers and design tools.",
    "Windows.Win32.UI.Shell.IDesktopWallpaper": "Provides methods for managing the desktop wallpaper.",
    "Windows.Win32.UI.Shell.IEnumIDList": "Exposes a standard set of methods used to enumerate the pointers to item identifier lists (PIDLs) of the items in a Shell folder. When a folder's `IShellFolder::EnumObjects` method is called, it creates an enumeration object and passes a pointer to the object's [IEnumIDList] interface back to the calling application.",
    "Windows.Win32.UI.Shell.IEnumResources": "Exposes resource enumeration methods.",
    "Windows.Win32.UI.Shell.IFileDialog": "Exposes methods that initialize, show, and get results from the common file dialog.",
    "Windows.Win32.UI.Shell.IFileDialog2": "Extends the IFileDialog interface by providing methods that allow the caller to name a specific, restricted location that can be browsed in the common file dialog as well as to specify alternate text to display as a label on the Cancel button.",
    "Windows.Win32.UI.Shell.IFileDialogCustomize": "Exposes methods that allow an application to add controls to a common file dialog.",
    "Windows.Win32.UI.Shell.IFileIsInUse": "Exposes methods that can be called to get information on or close a file that is in use by another application. When an application attempts to access a file and finds that file already in use, it can use the methods of this interface to gather information to present to the user in a dialog box.",
    "Windows.Win32.UI.Shell.IFileOpenDialog": "Extends the IFileDialog interface by adding methods specific to the open dialog.",
    "Windows.Win32.UI.Shell.IFileSaveDialog": "Extends the IFileDialog interface by adding methods specific to the save dialog, which include those that provide support for the collection of metadata to be persisted with the file.",
    "Windows.Win32.UI.Shell.IInitializeWithWindow": "Exposes a method through which a client can provide an owner window to a Windows Runtime (WinRT) object used in a desktop application.",
    "Windows.Win32.UI.Shell.IKnownFolder": "Exposes methods that allow an application to retrieve information about a known folder's category, type, GUID, pointer to an item identifier list (PIDL) value, redirection capabilities, and definition. It provides a method for the retrieval of a known folder's [IShellItem] object. It also provides methods to get or set the path of the known folder.",
    "Windows.Win32.UI.Shell.IKnownFolderManager": "Exposes methods that create, enumerate or manage existing known folders.",
    "Windows.Win32.UI.Shell.IModalWindow": "Exposes a method that represents a modal window.",
    "Windows.Win32.UI.Shell.IShellFolder": "Exposed by all Shell namespace folder objects, its methods are used to manage folders.",
    "Windows.Win32.UI.Shell.IShellItem": "Exposes methods that retrieve information about a Shell item. [IShellItem] and [IShellItem2] are the preferred representations of items in any new code.",
    "Windows.Win32.UI.Shell.IShellItem2": "Extends [IShellItem] with methods that retrieve various property values of the item. [IShellItem] and [IShellItem2] are the preferred representations of items in any new code.",
    "Windows.Win32.UI.Shell.IShellItemArray": "Exposes methods that create and manipulate Shell item arrays.",
    "Windows.Win32.UI.Shell.IShellItemFilter": "Exposed by a client to specify how to filter the enumeration of a Shell item by a server application.",
    "Windows.Win32.UI.Shell.IShellItemImageFactory": "Exposes a method to return either icons or thumbnails for Shell items. If no thumbnail or icon is available for the requested item, a per-class icon may be provided from the Shell.",
    "Windows.Win32.UI.Shell.IShellItemResources": "Exposes methods to manipulate and query Shell item resources.",
    "Windows.Win32.UI.Shell.IShellLinkDataList": "Exposes methods that allow an application to attach extra data blocks to a Shell link. These methods add, copy, or remove data blocks.",
    "Windows.Win32.UI.Shell.IShellLinkDual": "",
    "Windows.Win32.UI.Shell.IShellLinkW": "Exposes methods that create, modify, and resolve Shell links.",
    "Windows.Win32.UI.Shell.IShellService": "IShellService Exposes one method that declares ownership when a service component implementing a certain interface is shared among multiple clients, such as Windows Internet Explorer and Windows Explorer.",
    "Windows.Win32.UI.Shell.IVirtualDesktopManager": "Exposes methods that enable an application to interact with groups of windows that form virtual workspaces."
}